commit d1da64b8c70de1f52548de5184b0b4cfcb7e8d6c
Author: Saul Pablo Labajo Izquierdo <slabajo@naevatec.com>
Date:   Wed Jul 28 11:17:28 2021 +0200

    RtpEndpoint library

diff --git a/src/gst-plugins/rtpendpoint/CMakeLists.txt b/src/gst-plugins/rtpendpoint/CMakeLists.txt
index 2b71720..d74e3f4 100644
--- a/src/gst-plugins/rtpendpoint/CMakeLists.txt
+++ b/src/gst-plugins/rtpendpoint/CMakeLists.txt
@@ -1,5 +1,10 @@
 cmake_minimum_required(VERSION 2.8)
 
+
+set(CUSTOM_PREFIX "kurento")
+set(INCLUDE_PREFIX "${CMAKE_INSTALL_INCLUDEDIR}/${CUSTOM_PREFIX}/rtpendpoint")
+
+
 set(KMS_RTPENDPOINT_SOURCES
   kmsrtpbaseconnection.c
   kmsrtpconnection.c
@@ -12,6 +17,11 @@ set(KMS_RTPENDPOINT_SOURCES
 )
 
 set(KMS_RTPENDPOINT_HEADERS
+  kmsrtpbaseconnection.h
+  kmsrtpconnection.h
+  kmssrtpconnection.h
+  kmsrtpsession.h
+  kmssrtpsession.h
   kmsrtpendpoint.h
   kmssocketutils.h
 )
@@ -23,14 +33,16 @@ set(ENUM_HEADERS
 list(APPEND KMS_RTPENDPOINT_HEADERS ${ENUM_HEADERS})
 add_glib_enumtypes(KMS_RTPENDPOINT_SOURCES KMS_RTPENDPOINT_HEADERS kms-rtp-enumtypes KMS ${ENUM_HEADERS})
 
-add_library(kmsrtpendpoint MODULE ${KMS_RTPENDPOINT_SOURCES} ${KMS_RTPENDPOINT_HEADERS})
+add_glib_marshal(KMS_RTPENDPOINT_SOURCES KMS_RTPENDPOINT_HEADERS kms-rtp-marshal __kms_rtp_marshal)
+
+add_library(kmsrtpendpointlib SHARED ${KMS_RTPENDPOINT_SOURCES} ${KMS_RTPENDPOINT_HEADERS})
 if(SANITIZERS_ENABLED)
-  add_sanitizers(kmsrtpendpoint)
+  add_sanitizers(kmsrtpendpointlib)
 endif()
 
-add_dependencies(kmsrtpendpoint rtcpdemux)
+add_dependencies(kmsrtpendpointlib rtcpdemux)
 
-set_property(TARGET kmsrtpendpoint
+set_property(TARGET kmsrtpendpointlib
   PROPERTY INCLUDE_DIRECTORIES
     ${CMAKE_CURRENT_BINARY_DIR}
     ${CMAKE_CURRENT_SOURCE_DIR}
@@ -39,7 +51,7 @@ set_property(TARGET kmsrtpendpoint
     ${gstreamer-1.0_INCLUDE_DIRS}
 )
 
-target_link_libraries(kmsrtpendpoint
+target_link_libraries(kmsrtpendpointlib
   ${KmsGstCommons_LIBRARIES}
   ${gstreamer-1.0_LIBRARIES}
   ${gstreamer-base-1.0_LIBRARIES}
@@ -48,9 +60,48 @@ target_link_libraries(kmsrtpendpoint
   ${nice_LIBRARIES}
 )
 
+set_target_properties(kmsrtpendpointlib PROPERTIES PUBLIC_HEADER "${KMS_RTPENDPOINT_HEADERS}")
+set_target_properties(kmsrtpendpointlib PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})
+
+install(
+  TARGETS kmsrtpendpointlib
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  PUBLIC_HEADER DESTINATION ${INCLUDE_PREFIX}
+)
+
+foreach (HEADER ${KMS_RTPENDPOINT_HEADERS})
+  list (APPEND FIND_HEADERS rtpendpoint/${HEADER})
+endforeach ()
+
+configure_file(FindKmsRtpEndpointLib.cmake.in ${CMAKE_BINARY_DIR}/FindKmsRtpEndpointLib.cmake @ONLY)
+
+install(FILES
+	${CMAKE_BINARY_DIR}/FindKmsRtpEndpointLib.cmake
+  DESTINATION ${CMAKE_MODULES_INSTALL_DIR}
+)
+
+add_library(rtpendpoint MODULE kmsrtp.c)
+if(SANITIZERS_ENABLED)
+  add_sanitizers(rtpendpoint)
+endif()
+
+set_property (TARGET rtpendpoint
+  PROPERTY INCLUDE_DIRECTORIES
+    ${CMAKE_CURRENT_BINARY_DIR}/../../..
+    ${KmsGstCommons_INCLUDE_DIRS}
+    ${gstreamer-1.0_INCLUDE_DIRS}
+)
+
+target_link_libraries(rtpendpoint
+  kmsrtpendpointlib
+)
+
 install(
-  TARGETS kmsrtpendpoint
+  TARGETS rtpendpoint
   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
   LIBRARY DESTINATION ${CMAKE_INSTALL_GST_PLUGINS_DIR}
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
 )
+
diff --git a/src/gst-plugins/rtpendpoint/FindKmsRtpEndpointLib.cmake.in b/src/gst-plugins/rtpendpoint/FindKmsRtpEndpointLib.cmake.in
new file mode 100644
index 0000000..3645e70
--- /dev/null
+++ b/src/gst-plugins/rtpendpoint/FindKmsRtpEndpointLib.cmake.in
@@ -0,0 +1,104 @@
+# - Try to find KmsRtpEndpointLib library
+
+#=============================================================================
+# Copyright 2015 Kurento
+#
+#=============================================================================
+
+set(PACKAGE_VERSION "@PROJECT_VERSION@")
+set(KmsRtpEndpointLib_VERSION ${PACKAGE_VERSION})
+
+find_path(KmsRtpEndpointLib_INCLUDE_DIR
+  NAMES
+    @FIND_HEADERS@
+  PATH_SUFFIXES
+    src/gst-plugins
+    @CUSTOM_PREFIX@
+)
+
+set (KMS_RTP_ENDPOINT_BINARY_DIR_PREFIX "build" CACHE PATH "Path prefix used to look for binary files")
+
+if (TARGET kmsrtpendpointlib)
+
+	set (KmsRtpEndpointLib_GENERATED_INCLUDE_DIR "${KMS_RTP_ENDPOINT_BINARY_DIR_PREFIX}/src/gst-plugins/")
+
+else ()
+
+	find_path(KmsRtpEndpointLib_GENERATED_INCLUDE_DIR
+  NAMES
+    rtpendpoint/kms-rtp-marshal.h
+  PATH_SUFFIXES
+  ${KMS_RTP_ENDPOINT_BINARY_DIR_PREFIX}/src/gst-plugins
+    @CUSTOM_PREFIX@
+)
+
+endif ()
+
+set(KmsRtpEndpointLib_INCLUDE_DIRS ${KmsRtpEndpointLib_INCLUDE_DIR} ${KmsRtpEndpointLib_GENERATED_INCLUDE_DIR}
+	CACHE INTERNAL "Include directories for KmsRtpEndpointLib library"
+)
+
+if (TARGET kmsrtpendpointlib)
+  #Just get the target for the library
+  set (KmsRtpEndpointLib_LIBRARY kmsrtpendpointlib)
+else()
+
+	find_library (KmsRtpEndpointLib_LIBRARY
+  NAMES
+    kmsrtpendpointlib
+  PATH_SUFFIXES
+  ${KMS_RTP_ENDPOINT_BINARY_DIR_PREFIX}/src/gst-plugins/rtpendpoint
+)
+
+endif()
+
+set (KmsRtpEndpointLib_LIBRARIES ${KmsRtpEndpointLib_LIBRARY}
+	CACHE INTERNAL "Libraries for KmsRtpEndpointLib"
+)
+
+include (GenericFind)
+
+set (REQUIRED_LIBS "@REQUIRED_LIBS@")
+foreach (LIB ${REQUIRED_LIBS})
+  string(FIND ${LIB} " " POS)
+
+  if (${POS} GREATER 0)
+    string (SUBSTRING ${LIB} 0 ${POS} LIB_NAME)
+    string (SUBSTRING ${LIB} ${POS} -1 LIB_VERSION)
+    string (STRIP ${LIB_NAME} LIB_NAME)
+    string (STRIP ${LIB_VERSION} LIB_VERSION)
+    generic_find (LIBNAME ${LIB_NAME} REQUIRED VERSION "${LIB_VERSION}")
+  else ()
+    generic_find (LIBNAME ${LIB_NAME} REQUIRED)
+  endif ()
+  list (APPEND REQUIRED_LIBRARIES ${${LIB_NAME}_LIBRARIES})
+  list (APPEND REQUIRED_INCLUDE_DIRS ${${LIB_NAME}_INCLUDE_DIRS})
+
+endforeach()
+
+include (FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(KmsRtpEndpointLib
+  FOUND_VAR
+  KmsRtpEndpointLib_FOUND
+  REQUIRED_VARS
+  KmsRtpEndpointLib_VERSION
+  KmsRtpEndpointLib_INCLUDE_DIR
+  KmsRtpEndpointLib_GENERATED_INCLUDE_DIR
+  KmsRtpEndpointLib_INCLUDE_DIRS
+  KmsRtpEndpointLib_LIBRARY
+  KmsRtpEndpointLib_LIBRARIES
+  VERSION_VAR
+  KmsRtpEndpointLib_VERSION
+)
+
+mark_as_advanced(
+	KmsRtpEndpointLib_FOUND
+	KmsRtpEndpointLib_VERSION
+	KmsRtpEndpointLib_INCLUDE_DIR
+	KmsRtpEndpointLib_GENERATED_INCLUDE_DIR
+	KmsRtpEndpointLib_INCLUDE_DIRS
+	KmsRtpEndpointLib_LIBRARY
+	KmsRtpEndpointLib_LIBRARIES
+)
+
diff --git a/src/gst-plugins/rtpendpoint/kms-rtp-data-marshal.list b/src/gst-plugins/rtpendpoint/kms-rtp-data-marshal.list
new file mode 100644
index 0000000..7fe9451
--- /dev/null
+++ b/src/gst-plugins/rtpendpoint/kms-rtp-data-marshal.list
@@ -0,0 +1,9 @@
+INT:BOOLEAN,INT,INT,STRING,STRING
+OBJECT:UINT
+BOXED:VOID
+VOID:STRING,BOOLEAN
+VOID:STRING,UINT
+VOID:STRING,INT
+INT:STRING,BOOLEAN,INT,INT,STRING,STRING
+OBJECT:STRING,UINT
+BOXED:STRING,VOID
diff --git a/src/gst-plugins/rtpendpoint/kms-rtp-marshal.list b/src/gst-plugins/rtpendpoint/kms-rtp-marshal.list
new file mode 100644
index 0000000..f3ae58b
--- /dev/null
+++ b/src/gst-plugins/rtpendpoint/kms-rtp-marshal.list
@@ -0,0 +1,5 @@
+BOOLEAN:VOID
+BOOLEAN:OBJECT
+VOID:STRING,OBJECT
+BOOLEAN:STRING
+BOOLEAN:STRING,OBJECT
diff --git a/src/gst-plugins/rtpendpoint/kmsrtp.c b/src/gst-plugins/rtpendpoint/kmsrtp.c
new file mode 100644
index 0000000..f0f8a38
--- /dev/null
+++ b/src/gst-plugins/rtpendpoint/kmsrtp.c
@@ -0,0 +1,26 @@
+/*
+ * (C) Copyright 2013 Kurento (http://kurento.org/)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+#include "kmsrtpendpoint.h"
+#include "config.h"
+
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    rtpendpoint,
+    "Kurento rtp endpoint",
+    kms_rtp_endpoint_plugin_init, VERSION, GST_LICENSE_UNKNOWN,
+    "Kurento Elements", "http://kurento.org/")
diff --git a/src/gst-plugins/rtpendpoint/kmsrtpconnection.c b/src/gst-plugins/rtpendpoint/kmsrtpconnection.c
index 5dcd58a..da4d6f9 100644
--- a/src/gst-plugins/rtpendpoint/kmsrtpconnection.c
+++ b/src/gst-plugins/rtpendpoint/kmsrtpconnection.c
@@ -16,7 +16,6 @@
  */
 
 #include "kmsrtpconnection.h"
-#include "kmssocketutils.h"
 
 #define GST_CAT_DEFAULT kmsrtpconnection
 GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
@@ -43,13 +42,6 @@ enum
 
 struct _KmsRtpConnectionPrivate
 {
-  GSocket *rtp_socket;
-  GstElement *rtp_udpsink;
-  GstElement *rtp_udpsrc;
-
-  GSocket *rtcp_socket;
-  GstElement *rtcp_udpsink;
-  GstElement *rtcp_udpsrc;
 
   gboolean added;
   gboolean connected;
@@ -69,7 +61,7 @@ kms_rtp_connection_get_rtp_port (KmsRtpBaseConnection * base_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_conn);
 
-  return kms_socket_get_port (self->priv->rtp_socket);
+  return kms_socket_get_port (self->rtp_socket);
 }
 
 static guint
@@ -77,7 +69,7 @@ kms_rtp_connection_get_rtcp_port (KmsRtpBaseConnection * base_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_conn);
 
-  return kms_socket_get_port (self->priv->rtcp_socket);
+  return kms_socket_get_port (self->rtcp_socket);
 }
 
 static void
@@ -85,13 +77,12 @@ kms_rtp_connection_set_remote_info (KmsRtpBaseConnection * base_conn,
     const gchar * host, gint rtp_port, gint rtcp_port)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_conn);
-  KmsRtpConnectionPrivate *priv = self->priv;
 
   GST_INFO_OBJECT (self, "Set remote host: %s, RTP: %d, RTCP: %d",
       host, rtp_port, rtcp_port);
 
-  g_signal_emit_by_name (priv->rtp_udpsink, "add", host, rtp_port, NULL);
-  g_signal_emit_by_name (priv->rtcp_udpsink, "add", host, rtcp_port, NULL);
+  g_signal_emit_by_name (self->rtp_udpsink, "add", host, rtp_port, NULL);
+  g_signal_emit_by_name (self->rtcp_udpsink, "add", host, rtcp_port, NULL);
 }
 
 static void
@@ -99,14 +90,13 @@ kms_rtp_connection_add (KmsIRtpConnection * base_rtp_conn, GstBin * bin,
     gboolean active)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
-  KmsRtpConnectionPrivate *priv = self->priv;
 
   self->priv->is_client = active;
 
-  gst_bin_add_many (bin, g_object_ref (priv->rtp_udpsink),
-      g_object_ref (priv->rtp_udpsrc),
-      g_object_ref (priv->rtcp_udpsink),
-      g_object_ref (priv->rtcp_udpsrc), NULL);
+  gst_bin_add_many (bin, g_object_ref (self->rtp_udpsink),
+      g_object_ref (self->rtp_udpsrc),
+      g_object_ref (self->rtcp_udpsink),
+      g_object_ref (self->rtcp_udpsrc), NULL);
 }
 
 static void
@@ -114,10 +104,9 @@ kms_rtp_connection_src_sync_state_with_parent (KmsIRtpConnection *
     base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
-  KmsRtpConnectionPrivate *priv = self->priv;
 
-  gst_element_sync_state_with_parent (priv->rtp_udpsrc);
-  gst_element_sync_state_with_parent (priv->rtcp_udpsrc);
+  gst_element_sync_state_with_parent (self->rtp_udpsrc);
+  gst_element_sync_state_with_parent (self->rtcp_udpsrc);
 }
 
 static void
@@ -125,10 +114,9 @@ kms_rtp_connection_sink_sync_state_with_parent (KmsIRtpConnection *
     base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
-  KmsRtpConnectionPrivate *priv = self->priv;
 
-  gst_element_sync_state_with_parent (priv->rtp_udpsink);
-  gst_element_sync_state_with_parent (priv->rtcp_udpsink);
+  gst_element_sync_state_with_parent (self->rtp_udpsink);
+  gst_element_sync_state_with_parent (self->rtcp_udpsink);
 }
 
 static GstPad *
@@ -136,7 +124,7 @@ kms_rtp_connection_request_rtp_sink (KmsIRtpConnection * base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->rtp_udpsink, "sink");
+  return gst_element_get_static_pad (self->rtp_udpsink, "sink");
 }
 
 static GstPad *
@@ -144,7 +132,7 @@ kms_rtp_connection_request_rtp_src (KmsIRtpConnection * base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->rtp_udpsrc, "src");
+  return gst_element_get_static_pad (self->rtp_udpsrc, "src");
 }
 
 static GstPad *
@@ -152,7 +140,7 @@ kms_rtp_connection_request_rtcp_sink (KmsIRtpConnection * base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->rtcp_udpsink, "sink");
+  return gst_element_get_static_pad (self->rtcp_udpsink, "sink");
 }
 
 static GstPad *
@@ -160,7 +148,7 @@ kms_rtp_connection_request_rtcp_src (KmsIRtpConnection * base_rtp_conn)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->rtcp_udpsrc, "src");
+  return gst_element_get_static_pad (self->rtcp_udpsrc, "src");
 }
 
 static void
@@ -221,12 +209,10 @@ kms_rtp_connection_new (guint16 min_port, guint16 max_port, gboolean use_ipv6)
 {
   GObject *obj;
   KmsRtpConnection *conn;
-  KmsRtpConnectionPrivate *priv;
   GSocketFamily socket_family;
 
   obj = g_object_new (KMS_TYPE_RTP_CONNECTION, NULL);
   conn = KMS_RTP_CONNECTION (obj);
-  priv = conn->priv;
 
   if (use_ipv6) {
     socket_family = G_SOCKET_FAMILY_IPV6;
@@ -235,25 +221,25 @@ kms_rtp_connection_new (guint16 min_port, guint16 max_port, gboolean use_ipv6)
   }
 
   if (!kms_rtp_connection_get_rtp_rtcp_sockets
-      (&priv->rtp_socket, &priv->rtcp_socket, min_port, max_port,
+      (&conn->rtp_socket, &conn->rtcp_socket, min_port, max_port,
           socket_family)) {
     GST_ERROR_OBJECT (obj, "Cannot get ports");
     g_object_unref (obj);
     return NULL;
   }
 
-  priv->rtp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
-  priv->rtp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
-  g_object_set (priv->rtp_udpsink, "socket", priv->rtp_socket,
+  conn->rtp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
+  conn->rtp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
+  g_object_set (conn->rtp_udpsink, "socket", conn->rtp_socket,
       "sync", FALSE, "async", FALSE, NULL);
-  g_object_set (priv->rtp_udpsrc, "socket", priv->rtp_socket, "auto-multicast",
+  g_object_set (conn->rtp_udpsrc, "socket", conn->rtp_socket, "auto-multicast",
       FALSE, NULL);
 
-  priv->rtcp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
-  priv->rtcp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
-  g_object_set (priv->rtcp_udpsink, "socket", priv->rtcp_socket,
+  conn->rtcp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
+  conn->rtcp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
+  g_object_set (conn->rtcp_udpsink, "socket", conn->rtcp_socket,
       "sync", FALSE, "async", FALSE, NULL);
-  g_object_set (priv->rtcp_udpsrc, "socket", priv->rtcp_socket,
+  g_object_set (conn->rtcp_udpsrc, "socket", conn->rtcp_socket,
       "auto-multicast", FALSE, NULL);
 
   kms_i_rtp_connection_connected_signal (KMS_I_RTP_CONNECTION (conn));
@@ -267,16 +253,16 @@ kms_rtp_connection_enable_latency_stats (KmsRtpBaseConnection * base)
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base);
   GstPad *pad;
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsrc, "src",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsrc, "src",
       base->src_probe);
-  pad = gst_element_get_static_pad (self->priv->rtp_udpsrc, "src");
+  pad = gst_element_get_static_pad (self->rtp_udpsrc, "src");
   base->src_probe = kms_stats_add_buffer_latency_meta_probe (pad, FALSE,
       0 /* No matter type at this point */ );
   g_object_unref (pad);
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsink, "sink",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsink, "sink",
       base->sink_probe);
-  pad = gst_element_get_static_pad (self->priv->rtp_udpsink, "sink");
+  pad = gst_element_get_static_pad (self->rtp_udpsink, "sink");
   base->sink_probe = kms_stats_add_buffer_latency_notification_probe (pad,
       base->cb, TRUE /* Lock the data */ , base->user_data, NULL);
   g_object_unref (pad);
@@ -287,11 +273,11 @@ kms_rtp_transport_disable_latency_notification (KmsRtpBaseConnection * base)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (base);
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsrc, "src",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsrc, "src",
       base->src_probe);
   base->src_probe = 0UL;
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsink, "sink",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsink, "sink",
       base->sink_probe);
   base->sink_probe = 0UL;
 }
@@ -319,20 +305,19 @@ static void
 kms_rtp_connection_finalize (GObject * object)
 {
   KmsRtpConnection *self = KMS_RTP_CONNECTION (object);
-  KmsRtpConnectionPrivate *priv = self->priv;
 
   GST_DEBUG_OBJECT (self, "finalize");
 
   kms_rtp_transport_disable_latency_notification (KMS_RTP_BASE_CONNECTION
       (self));
 
-  g_clear_object (&priv->rtp_udpsink);
-  g_clear_object (&priv->rtp_udpsrc);
-  kms_socket_finalize (&self->priv->rtp_socket);
+  g_clear_object (&self->rtp_udpsink);
+  g_clear_object (&self->rtp_udpsrc);
+  kms_socket_finalize (&self->rtp_socket);
 
-  g_clear_object (&priv->rtcp_udpsink);
-  g_clear_object (&priv->rtcp_udpsrc);
-  kms_socket_finalize (&self->priv->rtcp_socket);
+  g_clear_object (&self->rtcp_udpsink);
+  g_clear_object (&self->rtcp_udpsrc);
+  kms_socket_finalize (&self->rtcp_socket);
 
   /* chain up */
   G_OBJECT_CLASS (kms_rtp_connection_parent_class)->finalize (object);
diff --git a/src/gst-plugins/rtpendpoint/kmsrtpconnection.h b/src/gst-plugins/rtpendpoint/kmsrtpconnection.h
index 17c8772..4686480 100644
--- a/src/gst-plugins/rtpendpoint/kmsrtpconnection.h
+++ b/src/gst-plugins/rtpendpoint/kmsrtpconnection.h
@@ -19,6 +19,8 @@
 #define __KMS_RTP_CONNECTION_H__
 
 #include "kmsrtpbaseconnection.h"
+#include "kmssocketutils.h"
+
 
 G_BEGIN_DECLS
 #define KMS_TYPE_RTP_CONNECTION \
@@ -40,6 +42,14 @@ struct _KmsRtpConnection
 {
   KmsRtpBaseConnection parent;
 
+  GSocket *rtp_socket;
+  GSocket *rtcp_socket;
+  GstElement *rtp_udpsink;
+  GstElement *rtp_udpsrc;
+
+  GstElement *rtcp_udpsink;
+  GstElement *rtcp_udpsrc;
+
   KmsRtpConnectionPrivate *priv;
 };
 
diff --git a/src/gst-plugins/rtpendpoint/kmsrtpendpoint.c b/src/gst-plugins/rtpendpoint/kmsrtpendpoint.c
index 200af35..a3db2b8 100644
--- a/src/gst-plugins/rtpendpoint/kmsrtpendpoint.c
+++ b/src/gst-plugins/rtpendpoint/kmsrtpendpoint.c
@@ -1178,10 +1178,3 @@ kms_rtp_endpoint_plugin_init (GstPlugin * plugin)
   return gst_element_register (plugin, PLUGIN_NAME, GST_RANK_NONE,
       KMS_TYPE_RTP_ENDPOINT);
 }
-
-GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
-    GST_VERSION_MINOR,
-    kmsrtpendpoint,
-    "Kurento rtp endpoint",
-    kms_rtp_endpoint_plugin_init, VERSION, GST_LICENSE_UNKNOWN,
-    "Kurento Elements", "http://kurento.com/")
diff --git a/src/gst-plugins/rtpendpoint/kmssrtpconnection.c b/src/gst-plugins/rtpendpoint/kmssrtpconnection.c
index aeda685..d39cd72 100644
--- a/src/gst-plugins/rtpendpoint/kmssrtpconnection.c
+++ b/src/gst-plugins/rtpendpoint/kmssrtpconnection.c
@@ -16,7 +16,6 @@
  */
 
 #include "kmssrtpconnection.h"
-#include "kmssocketutils.h"
 
 #define GST_CAT_DEFAULT kmsrtpconnection
 GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
@@ -54,26 +53,9 @@ static guint obj_signals[LAST_SIGNAL] = { 0 };
 
 struct _KmsSrtpConnectionPrivate
 {
-  GSocket *rtp_socket;
-  GstElement *rtp_udpsink;
-  GstElement *rtp_udpsrc;
-
-  GSocket *rtcp_socket;
-  GstElement *rtcp_udpsink;
-  GstElement *rtcp_udpsrc;
-
-  GstElement *srtpenc;
-  GstElement *srtpdec;
-
   gboolean added;
   gboolean connected;
   gboolean is_client;
-
-  gchar *r_key;
-  guint r_auth;
-  guint r_cipher;
-  gboolean r_updated;
-  gboolean r_key_set;
 };
 
 static void
@@ -101,7 +83,7 @@ kms_srtp_connection_get_rtp_port (KmsRtpBaseConnection * base_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_conn);
 
-  return kms_socket_get_port (self->priv->rtp_socket);
+  return kms_socket_get_port (self->rtp_socket);
 }
 
 static guint
@@ -109,7 +91,7 @@ kms_srtp_connection_get_rtcp_port (KmsRtpBaseConnection * base_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_conn);
 
-  return kms_socket_get_port (self->priv->rtcp_socket);
+  return kms_socket_get_port (self->rtcp_socket);
 }
 
 static void
@@ -117,13 +99,12 @@ kms_srtp_connection_set_remote_info (KmsRtpBaseConnection * base_conn,
     const gchar * host, gint rtp_port, gint rtcp_port)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_conn);
-  KmsSrtpConnectionPrivate *priv = self->priv;
 
   GST_INFO_OBJECT (self, "Set remote host: %s, RTP: %d, RTCP: %d",
       host, rtp_port, rtcp_port);
 
-  g_signal_emit_by_name (priv->rtp_udpsink, "add", host, rtp_port, NULL);
-  g_signal_emit_by_name (priv->rtcp_udpsink, "add", host, rtcp_port, NULL);
+  g_signal_emit_by_name (self->rtp_udpsink, "add", host, rtp_port, NULL);
+  g_signal_emit_by_name (self->rtcp_udpsink, "add", host, rtcp_port, NULL);
 }
 
 static void
@@ -131,18 +112,17 @@ kms_srtp_connection_add (KmsIRtpConnection * base_rtp_conn, GstBin * bin,
     gboolean active)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
-  KmsSrtpConnectionPrivate *priv = self->priv;
 
   self->priv->is_client = active;
 
-  gst_bin_add_many (bin, g_object_ref (priv->rtp_udpsink),
-      g_object_ref (priv->rtp_udpsrc),
-      g_object_ref (priv->rtcp_udpsink),
-      g_object_ref (priv->rtcp_udpsrc),
-      g_object_ref (priv->srtpenc), g_object_ref (priv->srtpdec), NULL);
+  gst_bin_add_many (bin, g_object_ref (self->rtp_udpsink),
+      g_object_ref (self->rtp_udpsrc),
+      g_object_ref (self->rtcp_udpsink),
+      g_object_ref (self->rtcp_udpsrc),
+      g_object_ref (self->srtpenc), g_object_ref (self->srtpdec), NULL);
 
-  gst_element_link_pads (priv->rtp_udpsrc, "src", priv->srtpdec, "rtp_sink");
-  gst_element_link_pads (priv->rtcp_udpsrc, "src", priv->srtpdec, "rtcp_sink");
+  gst_element_link_pads (self->rtp_udpsrc, "src", self->srtpdec, "rtp_sink");
+  gst_element_link_pads (self->rtcp_udpsrc, "src", self->srtpdec, "rtcp_sink");
 }
 
 static void
@@ -150,11 +130,10 @@ kms_srtp_connection_src_sync_state_with_parent (KmsIRtpConnection *
     base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
-  KmsSrtpConnectionPrivate *priv = self->priv;
 
-  gst_element_sync_state_with_parent (priv->srtpdec);
-  gst_element_sync_state_with_parent (priv->rtp_udpsrc);
-  gst_element_sync_state_with_parent (priv->rtcp_udpsrc);
+  gst_element_sync_state_with_parent (self->srtpdec);
+  gst_element_sync_state_with_parent (self->rtp_udpsrc);
+  gst_element_sync_state_with_parent (self->rtcp_udpsrc);
 }
 
 static void
@@ -162,11 +141,10 @@ kms_srtp_connection_sink_sync_state_with_parent (KmsIRtpConnection *
     base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
-  KmsSrtpConnectionPrivate *priv = self->priv;
 
-  gst_element_sync_state_with_parent (priv->srtpenc);
-  gst_element_sync_state_with_parent (priv->rtp_udpsink);
-  gst_element_sync_state_with_parent (priv->rtcp_udpsink);
+  gst_element_sync_state_with_parent (self->srtpenc);
+  gst_element_sync_state_with_parent (self->rtp_udpsink);
+  gst_element_sync_state_with_parent (self->rtcp_udpsink);
 }
 
 static GstPad *
@@ -174,7 +152,7 @@ kms_srtp_connection_request_rtp_sink (KmsIRtpConnection * base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_request_pad (self->priv->srtpenc, "rtp_sink_0");
+  return gst_element_get_request_pad (self->srtpenc, "rtp_sink_0");
 }
 
 static GstPad *
@@ -182,7 +160,7 @@ kms_srtp_connection_request_rtp_src (KmsIRtpConnection * base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->srtpdec, "rtp_src");
+  return gst_element_get_static_pad (self->srtpdec, "rtp_src");
 }
 
 static GstPad *
@@ -190,7 +168,7 @@ kms_srtp_connection_request_rtcp_sink (KmsIRtpConnection * base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_request_pad (self->priv->srtpenc, "rtcp_sink_0");
+  return gst_element_get_request_pad (self->srtpenc, "rtcp_sink_0");
 }
 
 static GstPad *
@@ -198,7 +176,7 @@ kms_srtp_connection_request_rtcp_src (KmsIRtpConnection * base_rtp_conn)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base_rtp_conn);
 
-  return gst_element_get_static_pad (self->priv->srtpdec, "rtcp_src");
+  return gst_element_get_static_pad (self->srtpdec, "rtcp_src");
 }
 
 static void
@@ -264,10 +242,10 @@ kms_srtp_connection_new_pad_cb (GstElement * element, GstPad * pad,
   templ = gst_pad_get_pad_template (pad);
 
   if (g_strcmp0 (GST_PAD_TEMPLATE_NAME_TEMPLATE (templ), "rtp_src_%u") == 0) {
-    sinkpad = gst_element_get_static_pad (conn->priv->rtp_udpsink, "sink");
+    sinkpad = gst_element_get_static_pad (conn->rtp_udpsink, "sink");
   } else if (g_strcmp0 (GST_PAD_TEMPLATE_NAME_TEMPLATE (templ),
           "rtcp_src_%u") == 0) {
-    sinkpad = gst_element_get_static_pad (conn->priv->rtcp_udpsink, "sink");
+    sinkpad = gst_element_get_static_pad (conn->rtcp_udpsink, "sink");
   } else {
     goto end;
   }
@@ -342,20 +320,20 @@ kms_srtp_connection_request_remote_key_cb (GstElement * srtpdec, guint ssrc,
 
   KMS_RTP_BASE_CONNECTION_LOCK (conn);
 
-  if (!conn->priv->r_key_set) {
+  if (!conn->r_key_set) {
     GST_DEBUG_OBJECT (conn, "key is not yet set");
     goto end;
   }
 
-  if (!conn->priv->r_updated) {
+  if (!conn->r_updated) {
     GST_DEBUG_OBJECT (conn, "Key is not yet updated");
   } else {
     GST_DEBUG_OBJECT (conn, "Using new key");
-    conn->priv->r_updated = FALSE;
+    conn->r_updated = FALSE;
   }
 
-  caps = create_key_caps (ssrc, conn->priv->r_key, conn->priv->r_auth,
-      conn->priv->r_cipher);
+  caps = create_key_caps (ssrc, conn->r_key, conn->r_auth,
+      conn->r_cipher);
 
   GST_DEBUG_OBJECT (srtpdec, "Key Caps: %" GST_PTR_FORMAT, caps);
 
@@ -382,12 +360,10 @@ kms_srtp_connection_new (guint16 min_port, guint16 max_port, gboolean use_ipv6)
 {
   GObject *obj;
   KmsSrtpConnection *conn;
-  KmsSrtpConnectionPrivate *priv;
   GSocketFamily socket_family;
 
   obj = g_object_new (KMS_TYPE_SRTP_CONNECTION, NULL);
   conn = KMS_SRTP_CONNECTION (obj);
-  priv = conn->priv;
 
   if (use_ipv6) {
     socket_family = G_SOCKET_FAMILY_IPV6;
@@ -396,37 +372,37 @@ kms_srtp_connection_new (guint16 min_port, guint16 max_port, gboolean use_ipv6)
   }
 
   if (!kms_rtp_connection_get_rtp_rtcp_sockets
-      (&priv->rtp_socket, &priv->rtcp_socket, min_port, max_port,
+      (&conn->rtp_socket, &conn->rtcp_socket, min_port, max_port,
           socket_family)) {
     GST_ERROR_OBJECT (obj, "Cannot get ports");
     g_object_unref (obj);
     return NULL;
   }
 
-  priv->r_updated = FALSE;
-  priv->r_key_set = FALSE;
+  conn->r_updated = FALSE;
+  conn->r_key_set = FALSE;
 
-  priv->srtpenc = gst_element_factory_make ("srtpenc", NULL);
-  priv->srtpdec = gst_element_factory_make ("srtpdec", NULL);
-  g_signal_connect (priv->srtpenc, "pad-added",
+  conn->srtpenc = gst_element_factory_make ("srtpenc", NULL);
+  conn->srtpdec = gst_element_factory_make ("srtpdec", NULL);
+  g_signal_connect (conn->srtpenc, "pad-added",
       G_CALLBACK (kms_srtp_connection_new_pad_cb), obj);
-  g_signal_connect (priv->srtpdec, "request-key",
+  g_signal_connect (conn->srtpdec, "request-key",
       G_CALLBACK (kms_srtp_connection_request_remote_key_cb), obj);
-  g_signal_connect (priv->srtpdec, "soft-limit",
+  g_signal_connect (conn->srtpdec, "soft-limit",
       G_CALLBACK (kms_srtp_connection_soft_key_limit_cb), obj);
 
-  priv->rtp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
-  priv->rtp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
-  g_object_set (priv->rtp_udpsink, "socket", priv->rtp_socket,
+  conn->rtp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
+  conn->rtp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
+  g_object_set (conn->rtp_udpsink, "socket", conn->rtp_socket,
       "sync", FALSE, "async", FALSE, NULL);
-  g_object_set (priv->rtp_udpsrc, "socket", priv->rtp_socket, "auto-multicast",
+  g_object_set (conn->rtp_udpsrc, "socket", conn->rtp_socket, "auto-multicast",
       FALSE, NULL);
 
-  priv->rtcp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
-  priv->rtcp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
-  g_object_set (priv->rtcp_udpsink, "socket", priv->rtcp_socket,
+  conn->rtcp_udpsink = gst_element_factory_make ("multiudpsink", NULL);
+  conn->rtcp_udpsrc = gst_element_factory_make ("udpsrc", NULL);
+  g_object_set (conn->rtcp_udpsink, "socket", conn->rtcp_socket,
       "sync", FALSE, "async", FALSE, NULL);
-  g_object_set (priv->rtcp_udpsrc, "socket", priv->rtcp_socket,
+  g_object_set (conn->rtcp_udpsrc, "socket", conn->rtcp_socket,
       "auto-multicast", FALSE, NULL);
 
   kms_i_rtp_connection_connected_signal (KMS_I_RTP_CONNECTION (conn));
@@ -440,16 +416,16 @@ kms_srtp_connection_enable_latency_stats (KmsRtpBaseConnection * base)
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base);
   GstPad *pad;
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsrc, "src",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsrc, "src",
       base->src_probe);
-  pad = gst_element_get_static_pad (self->priv->rtp_udpsrc, "src");
+  pad = gst_element_get_static_pad (self->rtp_udpsrc, "src");
   base->src_probe = kms_stats_add_buffer_latency_meta_probe (pad, FALSE,
       0 /* No matter type at this point */ );
   g_object_unref (pad);
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsink, "sink",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsink, "sink",
       base->sink_probe);
-  pad = gst_element_get_static_pad (self->priv->rtp_udpsink, "sink");
+  pad = gst_element_get_static_pad (self->rtp_udpsink, "sink");
   base->sink_probe = kms_stats_add_buffer_latency_notification_probe (pad,
       base->cb, TRUE /* Lock the data */ , base->user_data, NULL);
   g_object_unref (pad);
@@ -460,11 +436,11 @@ kms_srtp_transport_disable_latency_notification (KmsRtpBaseConnection * base)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (base);
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsrc, "src",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsrc, "src",
       base->src_probe);
   base->src_probe = 0UL;
 
-  kms_rtp_base_connection_remove_probe (base, self->priv->rtp_udpsink, "sink",
+  kms_rtp_base_connection_remove_probe (base, self->rtp_udpsink, "sink",
       base->sink_probe);
   base->sink_probe = 0UL;
 }
@@ -492,26 +468,25 @@ static void
 kms_srtp_connection_finalize (GObject * object)
 {
   KmsSrtpConnection *self = KMS_SRTP_CONNECTION (object);
-  KmsSrtpConnectionPrivate *priv = self->priv;
 
   GST_DEBUG_OBJECT (self, "finalize");
 
   kms_srtp_transport_disable_latency_notification (KMS_RTP_BASE_CONNECTION
       (self));
 
-  g_clear_object (&priv->rtp_udpsink);
-  g_clear_object (&priv->rtp_udpsrc);
+  g_clear_object (&self->rtp_udpsink);
+  g_clear_object (&self->rtp_udpsrc);
 
-  g_clear_object (&priv->rtcp_udpsink);
-  g_clear_object (&priv->rtcp_udpsrc);
+  g_clear_object (&self->rtcp_udpsink);
+  g_clear_object (&self->rtcp_udpsrc);
 
-  g_clear_object (&priv->srtpenc);
-  g_clear_object (&priv->srtpdec);
+  g_clear_object (&self->srtpenc);
+  g_clear_object (&self->srtpdec);
 
-  kms_socket_finalize (&self->priv->rtp_socket);
-  kms_socket_finalize (&self->priv->rtcp_socket);
+  kms_socket_finalize (&self->rtp_socket);
+  kms_socket_finalize (&self->rtcp_socket);
 
-  g_free (priv->r_key);
+  g_free (self->r_key);
 
   /* chain up */
   G_OBJECT_CLASS (parent_class)->finalize (object);
@@ -573,7 +548,7 @@ kms_srtp_connection_set_key (KmsSrtpConnection * conn, const gchar * key,
     bin_buff = g_base64_decode (key, &len);
     buff_key = gst_buffer_new_wrapped (bin_buff, len);
 
-    g_object_set (conn->priv->srtpenc, "key", buff_key, "rtp-cipher", cipher,
+    g_object_set (conn->srtpenc, "key", buff_key, "rtp-cipher", cipher,
         "rtcp-cipher", cipher, "rtp-auth", auth, "rtcp-auth", auth, NULL);
     gst_buffer_unref (buff_key);
   } else {
@@ -581,16 +556,16 @@ kms_srtp_connection_set_key (KmsSrtpConnection * conn, const gchar * key,
 
     KMS_RTP_BASE_CONNECTION_LOCK (conn);
 
-    changed = !conn->priv->r_key_set || g_strcmp0 (key, conn->priv->r_key) != 0
-        || conn->priv->r_auth != auth || conn->priv->r_cipher != cipher;
+    changed = !conn->r_key_set || g_strcmp0 (key, conn->r_key) != 0
+        || conn->r_auth != auth || conn->r_cipher != cipher;
 
     if (changed) {
-      g_free (conn->priv->r_key);
-      conn->priv->r_key = g_strdup (key);
-      conn->priv->r_auth = auth;
-      conn->priv->r_cipher = cipher;
-      conn->priv->r_updated = TRUE;
-      conn->priv->r_key_set = TRUE;
+      g_free (conn->r_key);
+      conn->r_key = g_strdup (key);
+      conn->r_auth = auth;
+      conn->r_cipher = cipher;
+      conn->r_updated = TRUE;
+      conn->r_key_set = TRUE;
     }
 
     KMS_RTP_BASE_CONNECTION_UNLOCK (conn);
diff --git a/src/gst-plugins/rtpendpoint/kmssrtpconnection.h b/src/gst-plugins/rtpendpoint/kmssrtpconnection.h
index 9f531fd..2f15b7d 100644
--- a/src/gst-plugins/rtpendpoint/kmssrtpconnection.h
+++ b/src/gst-plugins/rtpendpoint/kmssrtpconnection.h
@@ -19,6 +19,8 @@
 #define __KMS_SRTP_CONNECTION_H__
 
 #include "kmsrtpbaseconnection.h"
+#include "kmssocketutils.h"
+
 
 G_BEGIN_DECLS
 
@@ -42,6 +44,23 @@ struct _KmsSrtpConnection
 {
   KmsRtpBaseConnection parent;
 
+  GSocket *rtp_socket;
+  GstElement *rtp_udpsink;
+  GstElement *rtp_udpsrc;
+
+  GSocket *rtcp_socket;
+  GstElement *rtcp_udpsink;
+  GstElement *rtcp_udpsrc;
+
+  GstElement *srtpenc;
+  GstElement *srtpdec;
+
+  gchar *r_key;
+  guint r_auth;
+  guint r_cipher;
+  gboolean r_updated;
+  gboolean r_key_set;
+
   KmsSrtpConnectionPrivate *priv;
 };
 
diff --git a/tests/check/element/CMakeLists.txt b/tests/check/element/CMakeLists.txt
index b2ae719..3a834a5 100644
--- a/tests/check/element/CMakeLists.txt
+++ b/tests/check/element/CMakeLists.txt
@@ -52,6 +52,7 @@ target_include_directories(test_rtpendpoint PRIVATE
                            ${gstreamer-1.0_INCLUDE_DIRS}
                            ${gstreamer-check-1.0_INCLUDE_DIRS})
 target_link_libraries(test_rtpendpoint
+	              kmsrtpendpointlib
                       ${gstreamer-1.0_LIBRARIES}
                       ${gstreamer-sdp-1.0_LIBRARIES}
                       ${gstreamer-check-1.0_LIBRARIES}
@@ -65,6 +66,7 @@ target_include_directories(test_rtpendpoint_audio PRIVATE
                            ${gstreamer-1.0_INCLUDE_DIRS}
                            ${gstreamer-check-1.0_INCLUDE_DIRS})
 target_link_libraries(test_rtpendpoint_audio
+	              kmsrtpendpointlib
                       ${gstreamer-1.0_LIBRARIES}
                       ${gstreamer-sdp-1.0_LIBRARIES}
                       ${gstreamer-check-1.0_LIBRARIES}
